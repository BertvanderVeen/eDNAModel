here::dr_here()
library(eDNAmodel)
to2d(xx)
to2D(xx)
# Define test parameters
species <- 3
sites <- 2
replicates <- 4
lambda <- 5
# Define a zero-inflation probability matrix
zero_inflation_prob_matrix <- matrix(runif(species * sites, 0.1, 0.5), nrow = species, ncol = sites)
# Simulate ZIP data
simulated_data <- simulate_zip_data(species, sites, replicates, lambda, zero_inflation_prob_matrix)
# Convert to 2D format
Y <- to2D(simulated_data)
# Prepare data for TMB
prepared_data <- prepare_tmb_data_fit(Y)
# Mock a fitted model (for testing purposes)
fit_mock <- list(
report = function(x) {
return(list(
etao = matrix(runif(species, -2, 2), ncol = 1),
etaa = matrix(runif(species, -2, 2), ncol = 1)
))
},
env = list(
last.par.best = NULL,
data = list(sites = prepared_data$sites)
)
)
# Run the function
result <- plot_probabilities(fit_mock, Y)
function (x, by, FUN, ..., simplify = TRUE, drop = TRUE)
# Define test parameters
species <- 3
sites <- 2
replicates <- 4
lambda <- 5
# Define a zero-inflation probability matrix
zero_inflation_prob_matrix <- matrix(runif(species * sites, 0.1, 0.5), nrow = species, ncol = sites)
# Simulate ZIP data
simulated_data <- simulate_zip_data(species, sites, replicates, lambda, zero_inflation_prob_matrix)
# Convert to 2D format
Y <- to2D(simulated_data)
# Prepare data for TMB
prepared_data <- prepare_tmb_data_fit(Y)
# Mock a fitted model (for testing purposes)
fit_mock <- list(
report = function(x) {
return(list(
etao = matrix(runif(species, -2, 2), ncol = 1),
etaa = matrix(runif(species, -2, 2), ncol = 1)
))
},
env = list(
last.par.best = NULL,
data = list(sites = prepared_data$sites)
)
)
# Run the function
result <- plot_probabilities(fit_mock, Y)
library(ednaModel)
plot_probabilities
# Run the function
result <- tryCatch(
run_example(),
error = function(e) NULL
)
# ✅ Check if the function returns a list
expect_true(is.list(result))
library(testthat)
# ✅ Check if the function returns a list
expect_true(is.list(result))
traceback()
debugonce(run_example)
# ✅ Check if the function returns a list
expect_true(is.list(result))
# Run the function
result <- tryCatch(
run_example(),
error = function(e) NULL
)
d
debugonce(run_example)
# Run the function
result <- tryCatch(
run_example(),
error = function(e) NULL
)
Y
prepare_tmb_data_fit(Y)
un_TMB_model(data_list)
run_TMB_model(data_list)
traceback()
fit_results <- run_TMB_model(data_list)
traceback()
library(eDNAmodel)
install.packages(eDNAModel)
here::dr_here()
library(eDNAmodel)
here::dr_here()
install.packages(c("TMB", "Matrix", "gllvm", "ggplot2", "devtools", "testthat", "roxygen2"))
devtools::check()
devtools::document()
devtools::install()
compile("~/Desktop/Diversea/occ.cpp", framework="TMBad", flags="-O0 -g")#Only use flags for debugging
library(usethis)
library(TMB)
library(Matrix)
require(gllvm)
library(ggplot2)
#create_package("eDNAModel")
# Load necessary libraries
library(TMB)
library(Matrix)
## TMB stuff ##
library(TMB)
compile("~/Desktop/Diversea/occ.cpp", framework="TMBad", flags="-O0 -g")#Only use flags for debugging
dyn.load("~/Desktop/Diversea/occ.so")
## end TMB stuff ##
## Data stuff ##
# Data from: https://besjournals.onlinelibrary.wiley.com/doi/10.1111/2041-210X.13732
load("~/Desktop/Diversea/data.Rdata")
names(dimnames(y)) <- c("Species",  "Sites", "Replicates")
#' Convert a 3D array to a 2D matrix
#'
#' @param array_3d A 3D array with dimensions (Species, Sites, Replicates).
#' @return A data frame with Site, Replicate, and species data.
#' @export
to2D <- function(array_3d) {
species <- dim(array_3d)[1]
sites <- dim(array_3d)[2]
replicates <- dim(array_3d)[3]
data_values <- matrix(array_3d, nrow = sites * replicates, ncol = species, byrow = FALSE)
site_column <- rep(dimnames(array_3d)$Sites, each = replicates)
replicate_column <- rep(dimnames(array_3d)$Replicates, times = sites)
final_data <- data.frame(
Site = site_column,
Replicate = replicate_column,
data_values
)
colnames(final_data)[3:(2 + species)] <- dimnames(array_3d)$Species
return(final_data)
}
devtools::install()
setwd("~/Desktop/eDNAModel")
library(devtools)
devtools::install()  # Install the package
setwd("~/Desktop/eDNAModel")
devtools::install()
devtools::install(dependencies = FALSE)
find.package("eDNAModel")  # Check installation path
remove.packages("eDNAModel")
devtools::install()
