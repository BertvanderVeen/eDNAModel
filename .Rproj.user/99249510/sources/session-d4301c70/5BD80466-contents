#' Prepare Data for TMB Model
#'
#' @param Y A 2D data frame containing species, sites, and replicates.
#' @return A list containing formatted data for TMB.
#' @export
prepare_tmb_data_fit <- function(Y) {
  require(TMB)
  require(Matrix)
  require(gllvm)

  # Step 1: Prepare Data
  y <- as.matrix(Y[, -c(1:2)])
  Y$Site <- as.factor(Y$Site)
  sites <- (as.numeric(as.factor(Y[, 1]))) - 1

  ysites <- as.matrix(aggregate(y, FUN = sum, list(sites)))[, -1] # Sum over replicates
  Xa <- model.matrix(~ Site, Y)
  Y$Replicate <- as.factor(Y$Replicate)
  Y$Replicate1 <- as.numeric(as.factor(Y$Replicate))

  Zalist <- gllvm:::mkReTrms1(gllvm:::findbars1(~diag(1 | Replicate1)), Y)
  csa <- Zalist$cs  # Set to single column matrix if no REs
  Za <- Matrix::t(Zalist$Zt)

  Xo <- model.matrix(~0 + Site, data.frame(Site = as.factor(1:max(as.numeric(Y$Site)))))
  Zo <- as(matrix(0), "TsparseMatrix")
  cso <- matrix(0)  # Set to single column matrix if no REs

  family <- 1  # 0 is ZIP, 1 is ZINB, 2 is BINOM with Ntrials
  linka <- 0  # Abundance link function: 0 = log, 1 = logit, 2 = probit, 3 = cloglog
  linko <- 1  # Occupancy link function: 0 = log, 1 = logit, 2 = probit, 3 = cloglog
  NTrials <- matrix(0)  # nrow(y) by ncol(y) matrix for binomial size (for family = 2)

  # Step 2: Initialize Parameters
  Ba <- matrix(0, nrow = ncol(Xa), ncol = ncol(y))
  Bo <- matrix(0, nrow = ncol(Xo), ncol = ncol(y))
  Ua <- matrix(0)
  Uo <- matrix(0)
  logphi <- rep(0, ncol(y))
  logsda <- rep(0, nrow(Ua))
  corsa <- rep(1e-5, nrow(csa))
  logsdo <- rep(0, nrow(Uo))
  corso <- 0

  # Empty maplist (can be populated later for efficiency)
  maplist <- list()

  # Step 3: First TMB Call
  fit <- MakeADFun(
    data = list(
      Y = y, Ysites = ysites, Xa = Xa, Xo = Xo, Za = as(matrix(0), "TsparseMatrix"), Zo = as(matrix(0), "TsparseMatrix"),
      family = family, sites = sites, csa = matrix(0), cso = matrix(0), NTrials = NTrials, linka = linka, linko = linko
    ),
    parameters = list(
      Ba = Ba, Bo = Bo, Ua = Ua, Uo = Uo, logphi = logphi, logsda = logsda, corsa = corsa, logsdo = logsdo, corso = corso
    ),
    DLL = "occ",
    map = maplist
  )

  opt <- optim(
    fit$par, fit$fn, fit$gr, method = "L-BFGS-B",
    control = list(trace = 1, maxit = 1000)
  )

  # Extract Ba and Bo Estimates
  Bas <- opt$par[names(opt$par) == "Ba"]
  Bas2 <- if ("Ba" %in% names(maplist)) Bas[fit$env$map$Ba] else Bas
  Ba2 <- matrix(Bas2, nrow = ncol(Xa))

  Bos <- opt$par[names(opt$par) == "Bo"]
  Bos2 <- if ("Bo" %in% names(maplist)) Bos[fit$env$map$Bo] else Bos
  Bo2 <- matrix(Bos2, nrow = ncol(Xo))

  # Adjust for Random Effects
  if (nrow(Za) > 1) {
    Ua <- matrix(0, nrow = ncol(Za), ncol = ncol(y))
  } else {
    Ua <- matrix(0)
  }

  if (nrow(Zo) > 1) {
    Uo <- matrix(0, nrow = ncol(Zo), ncol = ncol(y))
  } else {
    Uo <- matrix(0)
  }

  logsda <- rep(0, nrow(Ua))
  corsa <- rep(1e-5, nrow(csa))
  logsdo <- rep(0, nrow(Uo))
  corso <- rep(1e-5, nrow(cso))
  if (family == 1) logphi <- opt$par[names(opt$par) == "logphi"]

  # Step 4: Final TMB Call
  random <- NULL
  if (nrow(Za) > 1) random <- c(random, "Ua")
  if (nrow(Zo) > 1) random <- c(random, "Uo")

  TMB::openmp(1, autopar = TRUE, DLL = "occ")

  fit <- MakeADFun(
    data = list(
      Y = y, Ysites = ysites, Xa = Xa, Xo = Xo, Za = Za, Zo = Zo,
      family = family, sites = sites, csa = csa, cso = cso, NTrials = NTrials, linka = linka, linko = linko
    ),
    parameters = list(
      Ba = Ba2, Bo = Bo2, Ua = Ua, Uo = Uo, logphi = logphi, logsda = logsda, corsa = corsa, logsdo = logsdo, corso = corso
    ),
    random = random,
    DLL = "occ",
    silent = FALSE,
    inner.control = list(mgcmax = 1e+200, tol10 = 0.01),
    map = maplist
  )

  opt2 <- optim(
    fit$par, fit$fn, fit$gr, method = "L-BFGS-B",
    control = list(trace = 1, maxit = 1e6)
  )

  return(list(fit = fit, opt = opt2))
}
